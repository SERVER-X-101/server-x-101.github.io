<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DSA on SERVER-X-101</title>
    <link>https://server-x-101.github.io/tags/dsa/</link>
    <description>Recent content in DSA on SERVER-X-101</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Feb 2024 08:36:36 -0700</lastBuildDate>
    <atom:link href="https://server-x-101.github.io/tags/dsa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DSA Mastery</title>
      <link>https://server-x-101.github.io/articles/dsa-mastery/</link>
      <pubDate>Tue, 27 Feb 2024 08:36:36 -0700</pubDate>
      <guid>https://server-x-101.github.io/articles/dsa-mastery/</guid>
      <description>DSA Mastery in 9 Weeks: Read, Solve, Code!&#xA;Data Structures and Algorithms Roadmap Five steps to Mastering DSA Mastering DSA as a beginner is simplified into 5 steps:&#xA;Choose a programming language. Understand time and space complexities. Learn basic data structures and algorithms. Practice a lot. Join competitions to get really good. INDEX 1. Master at least one Programming Language&#xD;2. Understand Complexities&#xD;3. Learn essential Data Structures and Algorithms&#xD;3.</description>
    </item>
    <item>
      <title>Tarjan&#39;s Algorithm</title>
      <link>https://server-x-101.github.io/articles/tarjans-algorithm/</link>
      <pubDate>Fri, 02 Feb 2024 22:08:13 -0700</pubDate>
      <guid>https://server-x-101.github.io/articles/tarjans-algorithm/</guid>
      <description>A directed graph exhibits strong connectivity when every pair of vertices is connected by a path. A strongly connected component (SCC) within such a graph is a largest subgraph where every vertex is reachable from every other vertex. For instance, in the given graph, there are three SCCs.&#xA;Algorithm:&#xA;Tarjan&amp;rsquo;s algorithm utilizes DFS (Depth First Search) traversal. It maintains three arrays: disc[] to store discovery time of vertices, low[] to store the earliest visited vertex reachable from subtree rooted with current vertex, and stackMember[] to keep track of vertices present in the stack.</description>
    </item>
  </channel>
</rss>
