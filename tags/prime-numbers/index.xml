<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>prime-numbers on SERVER-X-101</title>
    <link>https://server-x-101.github.io/tags/prime-numbers/</link>
    <description>Recent content in prime-numbers on SERVER-X-101</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Feb 2024 22:08:13 -0700</lastBuildDate>
    <atom:link href="https://server-x-101.github.io/tags/prime-numbers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sieve of Eratosthenes Algorithm</title>
      <link>https://server-x-101.github.io/articles/sieve-of-eratosthenes/</link>
      <pubDate>Tue, 13 Feb 2024 22:08:13 -0700</pubDate>
      <guid>https://server-x-101.github.io/articles/sieve-of-eratosthenes/</guid>
      <description>The Sieve of Eratosthenes is an ancient algorithm used to find all prime numbers up to a specified integer. It works by iteratively marking the multiples of each prime number starting from 2 as composite (not prime). After iterating through all numbers up to the square root of the limit, the remaining unmarked numbers are primes.&#xA;Python Implementation file_type_python&#xD;sieve_of_eratosthenes.py def sieve_of_eratosthenes(limit): primes = [True] * (limit + 1) primes[0] = primes[1] = False p = 2 while p * p &amp;lt;= limit: # If primes[p] is not changed, then it is a prime if primes[p]: # Update all multiples of p starting from p^2 for i in range(p * p, limit + 1, p): primes[i] = False p += 1 prime_numbers = [] for i in range(2, limit + 1): if primes[i]: prime_numbers.</description>
    </item>
  </channel>
</rss>
