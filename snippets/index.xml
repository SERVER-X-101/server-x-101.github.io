<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Snippets on SERVER-X-101</title>
    <link>https://server-x-101.github.io/snippets/</link>
    <description>Recent content in Snippets on SERVER-X-101</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 May 2020 05:56:37 -0700</lastBuildDate>
    <atom:link href="https://server-x-101.github.io/snippets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Server-side Firebase User Authentication Setup</title>
      <link>https://server-x-101.github.io/snippets/server-side-firebase-user-authentication-setup/</link>
      <pubDate>Fri, 22 May 2020 05:56:37 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/server-side-firebase-user-authentication-setup/</guid>
      <description>The subsequent example illustrates the setup of server-side authentication in Firebase on any node server utilizing Express.js.&#xA;Note: If utilizing Firebase Cloud Functions, you can utilize Callable Functions to automatically manage this authentication type.&#xA;Client-side: Embed the ID Token Your client-side code needs to append the ID token to the authorization header when sending a request to the server. The following instance utilizes the browser&amp;rsquo;s built-in fetch API.&#xA;file_type_js&#xD;frontend-app.js import firebase from &amp;#39;firebase&amp;#39;; const auth = firebase.</description>
    </item>
    <item>
      <title>Using JavaScript with Flutter Web</title>
      <link>https://server-x-101.github.io/snippets/using-javascript-with-flutter-web/</link>
      <pubDate>Sun, 19 Apr 2020 08:00:17 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/using-javascript-with-flutter-web/</guid>
      <description>Flutter Web enables the development of progressive web apps (PWAs) using Dart. However, to access browser APIs or integrate with existing JavaScript code, you&amp;rsquo;ll need to interoperate between Dart and JavaScript. Below, we explore how to achieve this in a Flutter web app.&#xA;Interoperating JavaScript with Dart Dart.js is a built-in library that facilitates communication between Dart and JavaScript.&#xA;Adding JavaScript Functions Create a JavaScript file (app.js) in the web directory.</description>
    </item>
    <item>
      <title>Building a CSS Dropdown Menu Without JavaScript</title>
      <link>https://server-x-101.github.io/snippets/building-a-css-dropdown-menu-without-javascript/</link>
      <pubDate>Tue, 24 Mar 2020 12:03:21 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/building-a-css-dropdown-menu-without-javascript/</guid>
      <description>In the following example, we&amp;rsquo;ll illustrate how to construct a dropdown menu using CSS exclusively, without any JavaScript. This approach ensures that the dropdown retains its state when clicked. A key element of this demonstration is the :focus-within pseudo selector, which enables the dropdown to remain open even when its child links are clicked.&#xA;Step 1: Setting up the Navigation Bar Begin by creating the basic structure of the navigation bar.</description>
    </item>
    <item>
      <title>Accessing Index in Dart List.map()</title>
      <link>https://server-x-101.github.io/snippets/accessing-index-in-dart-list-map/</link>
      <pubDate>Sat, 21 Dec 2019 07:55:05 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/accessing-index-in-dart-list-map/</guid>
      <description>The following guide demonstrates how to access the index during iteration when utilizing List.map in Dart. This is frequently needed in Flutter when mapping a list of values to widgets.&#xA;Problem In Dart, unlike JavaScript, directly accessing the index of a list during a List.map operation is not straightforward.&#xA;file_type_dartlang main.dart List myList = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; myList.map((val, index) { // Index access does not work! // Which index am I on?</description>
    </item>
    <item>
      <title>Managing Radial Pan Events in Flutter</title>
      <link>https://server-x-101.github.io/snippets/managing-radial-pan-events-in-flutter/</link>
      <pubDate>Mon, 02 Dec 2019 09:19:58 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/managing-radial-pan-events-in-flutter/</guid>
      <description>One UI element not natively supported in Flutter is a click wheel, rotary control, or radial knob. The following snippet demonstrates how to create a circular container and detect the direction (clockwise or counterclockwise) and velocity of user rotation.&#xA;Access the complete source code for the wheel demo.&#xA;Flutter Circular Pan Wheel Detecting Pan Gestures Utilize a GestureDetector to encompass a circular container with a BoxShape.circle. Each pan event on the circle will generate data containing movement information.</description>
    </item>
    <item>
      <title>Setup Nest on Cloud Functions</title>
      <link>https://server-x-101.github.io/snippets/setup-nestjs-on-cloud-functions/</link>
      <pubDate>Mon, 12 Aug 2019 10:26:16 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/setup-nestjs-on-cloud-functions/</guid>
      <description>Setting up NestJS on Firebase Cloud Functions allows you to leverage the power of NestJS in serverless environments. Below are two different techniques for achieving this integration.&#xA;Option A - Point a Function to Nest This setup modifies the functions configuration to use the Nest /dist output instead of the default functions directory. It&amp;rsquo;s suitable for existing Nest applications.&#xA;Step 1 - Create Nest App Generate a new Nest app and remove the automatically generated functions directory.</description>
    </item>
    <item>
      <title>React Hooks for Managing Media Queries</title>
      <link>https://server-x-101.github.io/snippets/react-hooks-for-managing-media-queries/</link>
      <pubDate>Mon, 08 Jul 2019 23:11:49 -0400</pubDate>
      <guid>https://server-x-101.github.io/snippets/react-hooks-for-managing-media-queries/</guid>
      <description>Hooks provide a way to use state and other React features without using class components.&#xA;useMediaQuery() Hook This simple hook facilitates the sharing and rendering of components, logic, and styling based on media queries directly from your JSX code.&#xA;Creating the Hook hooks/useMediaQuery.jsx import { useState, useEffect } from &amp;#34;react&amp;#34;; const useMediaQuery = (query) =&amp;gt; { const [matches, setMatches] = useState(false); useEffect(() =&amp;gt; { const media = window.matchMedia(query); if (media.matches !</description>
    </item>
    <item>
      <title>Exploring Svelte Custom Store Examples</title>
      <link>https://server-x-101.github.io/snippets/exploring-svelte-custom-store-examples/</link>
      <pubDate>Tue, 23 Apr 2019 07:41:02 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/exploring-svelte-custom-store-examples/</guid>
      <description>A Svelte store provides a reactive data stream capable of dynamic changes. Constructing a custom store in Svelte is straightforward. It involves creating a writable store within a function and returning its subscribe function encapsulated in an object.&#xA;Applications of Custom Stores Application: Business Logic Custom stores are handy for abstracting data operations, serving as fundamental components for more intricate functionalities.&#xA;App.svelte import { writable } from &amp;#39;svelte/store&amp;#39;; function myStore() { const { subscribe, set, update } = writable(0); return { subscribe, addOne: () =&amp;gt; update(n =&amp;gt; n + 1), reset: () =&amp;gt; set(0) }; } // Utilize it like a standard store myStore.</description>
    </item>
    <item>
      <title>Sample Cron Schedules</title>
      <link>https://server-x-101.github.io/snippets/sample-cron-schedules/</link>
      <pubDate>Mon, 08 Apr 2019 07:41:02 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/sample-cron-schedules/</guid>
      <description>Cron is a persistent process utilized on Linux servers, operating at specific times according to the crontab pattern (with a minimum granularity of 1 minute). It is employed for configuring cronjobs, background tasks executed at predetermined times or intervals. Additionally, Firebase now features a time-triggered Cloud Function that can be configured with crontab. The following guide illustrates how to schedule cronjobs in this format.&#xA;Tip: Instead of memorizing all examples below, consider using the Crontab Guru app for reference.</description>
    </item>
    <item>
      <title>Flutter Skeleton Text with Shimmer Animation</title>
      <link>https://server-x-101.github.io/snippets/flutter-skeleton-text/</link>
      <pubDate>Tue, 19 Mar 2019 09:35:09 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/flutter-skeleton-text/</guid>
      <description>Skeleton text is a strategy that improves the perceived load time of content by rendering a blank placeholder that roughly matches the size of the expected content. This method was originally made popular by Facebook, but is now used on many popular apps and websites.&#xA;Use this skeleton text widget as a placeholder when loading data from an external source.&#xA;Flutter Skeleton Text Widget The skeleton text effect can be created in Flutter with an animated loop over a color gradient.</description>
    </item>
    <item>
      <title>GitHub Action deploying Angular App to Firebase Hosting</title>
      <link>https://server-x-101.github.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</link>
      <pubDate>Tue, 19 Feb 2019 23:12:09 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</guid>
      <description>This snippet helps you to setup GitHub Actions in your Angular project to build and deploy your app to Firebase on git push.&#xA;Step 1. Actions In your repository click on Actions.&#xA;Step 2. New Workflow To create your first workflow click on Set up a workflow yourself&#xA;Your first GitHub action looks like this:&#xA;main.yml name: CI on: [push] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: Run a one-line script run: echo Hello, world!</description>
    </item>
    <item>
      <title>Intersection Observer for Lazy-Loaded Images</title>
      <link>https://server-x-101.github.io/snippets/intersection-observer-lazy-load-images/</link>
      <pubDate>Fri, 25 Jan 2019 05:48:23 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/intersection-observer-lazy-load-images/</guid>
      <description>IntersectionObserver is a browser API that allows you to detect when an element is visible in the window or within a scrollable element. Browser support is pretty decent with Safari being the main holdout at the time of this article, but there is a polyfill to support Apple users.&#xA;Packages using IntersectionObserver:&#xA;QuickLink - Adds a preload tag to visible links on the page. Vanilla Lazy Load - Lazy loaded images.</description>
    </item>
    <item>
      <title>How to Participate on Github</title>
      <link>https://server-x-101.github.io/snippets/git-how-to-participate-on-github/</link>
      <pubDate>Thu, 17 Jan 2019 05:42:54 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/git-how-to-participate-on-github/</guid>
      <description>Contributing to open-source is satisfying on many levels. Not only does it validate your skills for recruiters, but it leads to higher quality software that empowers developers to build better products. But submitting your first pull request on GitHub can be intimidating. The goal of this guide is to give you a clear set of steps for contributing any OS project (like SERVER-X-101).&#xA;This guide assumes that you have a Github account and git installed on your machine.</description>
    </item>
    <item>
      <title>Flutter Google Maps Setup</title>
      <link>https://server-x-101.github.io/snippets/setup-google-maps-flutter/</link>
      <pubDate>Sat, 12 Jan 2019 10:13:59 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/setup-google-maps-flutter/</guid>
      <description>The following guide is designed to get you up and running with Google Maps in Flutter for iOS and Android, as well as device GPS tracking.&#xA;Also refer to the official Flutter Google Maps Plugin setup docs as needed.&#xA;Google Maps for Flutter Get your Google Maps API Key First, obtain an API key for Google Maps within the context of a Google Cloud Platform project.&#xA;iOS Setup file_type_config ios/Runner/AppDelegate.m #include &amp;#34;AppDelegate.</description>
    </item>
    <item>
      <title>Passing Data to Modals in Ionic 4</title>
      <link>https://server-x-101.github.io/snippets/passing-data-to-modals-in-ionic-4/</link>
      <pubDate>Sat, 22 Sep 2018 23:12:09 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/passing-data-to-modals-in-ionic-4/</guid>
      <description>Below is a guide on utilizing componentProps to transmit data into an Ionic 4 modal. This method is particularly beneficial for updating dynamic content.&#xA;Passing Data to Ionic 4 Modals In previous versions of Ionic, the NavParams class was employed to access passed data. However, with Ionic 4, this approach is deprecated and discouraged, although it remains functional. Version 4 introduces a more straightforward method for data sharing with modals.</description>
    </item>
    <item>
      <title>Testing RxJS Observables with Jest</title>
      <link>https://server-x-101.github.io/snippets/testing-rxjs-observables-with-jest/</link>
      <pubDate>Sat, 18 Aug 2018 18:39:19 -0700</pubDate>
      <guid>https://server-x-101.github.io/snippets/testing-rxjs-observables-with-jest/</guid>
      <description>Testing RxJS Observables with Jest is straightforward and allows you to ensure your asynchronous data streams behave as expected. Below are examples of how to write unit tests for RxJS Observables using Jest.&#xA;Testing a Single Emitted Value Consider an Observable that emits a single string value. You can create this Observable using the of operator. It&amp;rsquo;s essential to use the done keyword to inform Jest that the test is asynchronous and should wait for completion.</description>
    </item>
  </channel>
</rss>
